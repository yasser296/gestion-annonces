// backend/scripts/createAttributesForMyCategories.js
const mongoose = require('mongoose');
require('dotenv').config();

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/annoncesDB', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ MongoDB connect√©');
  } catch (err) {
    console.error('‚ùå Erreur connexion MongoDB:', err.message);
    process.exit(1);
  }
};

const Categorie = require('../models/Categorie');
const Attribute = require('../models/Attribute');

// Templates d'attributs sp√©cifiques pour VOS cat√©gories exactes
const myAttributeTemplates = {
  // Attributs g√©n√©riques pour toutes cat√©gories
  generic: [
    {
      nom: 'Marque',
      type: 'string',
      placeholder: 'Marque du produit',
      description: 'Nom de la marque ou du fabricant',
      required: false,
      ordre: 1
    },
    {
      nom: '√âtat',
      type: 'select',
      options: ['Neuf', 'Comme neuf', 'Bon √©tat', '√âtat moyen', '√Ä r√©parer'],
      required: true,
      ordre: 2
    }
  ],

  // Templates sp√©cifiques par cat√©gorie (noms EXACTES de votre base)
  specific: {
    // üíº Emploi - 6 annonces
    'Emploi': [
      {
        nom: 'Type de contrat',
        type: 'select',
        options: ['CDI', 'CDD', 'Stage', 'Freelance', 'Temps partiel', 'Int√©rim', 'Apprentissage'],
        required: true,
        ordre: 3
      },
      {
        nom: 'Secteur d\'activit√©',
        type: 'select',
        options: ['Informatique', 'Commerce', 'Sant√©', '√âducation', 'Finance', 'BTP', 'Restauration', 'Transport', 'Marketing', 'Autre'],
        required: true,
        ordre: 4
      },
      {
        nom: 'Exp√©rience requise',
        type: 'select',
        options: ['D√©butant accept√©', '1-2 ans', '3-5 ans', '5-10 ans', '10+ ans'],
        required: false,
        ordre: 5
      },
      {
        nom: 'Niveau d\'√©tudes',
        type: 'select',
        options: ['Sans dipl√¥me', 'Bac', 'Bac+2', 'Bac+3', 'Bac+5', 'Doctorat'],
        required: false,
        ordre: 6
      },
      {
        nom: 'T√©l√©travail possible',
        type: 'boolean',
        ordre: 7
      },
      {
        nom: 'Date de d√©but',
        type: 'date',
        placeholder: 'Date de d√©but souhait√©e',
        required: false,
        ordre: 8
      }
    ],

    // üõãÔ∏è Meubles - 6 annonces  
    'Meubles': [
      {
        nom: 'Type de meuble',
        type: 'select',
        options: ['Canap√©', 'Table', 'Chaise', 'Lit', 'Armoire', 'Commode', 'Bureau', '√âtag√®re', 'Fauteuil', 'Table basse'],
        required: true,
        ordre: 3
      },
      {
        nom: 'Mat√©riau principal',
        type: 'select',
        options: ['Bois massif', 'Bois agglom√©r√©', 'M√©tal', 'Plastique', 'Tissu', 'Cuir', 'Verre', 'Rotin'],
        required: false,
        ordre: 4
      },
      {
        nom: 'Dimensions',
        type: 'string',
        placeholder: 'L x l x h (ex: 120x80x75 cm)',
        description: 'Dimensions en centim√®tres',
        required: false,
        ordre: 5
      },
      {
        nom: 'Couleur',
        type: 'string',
        placeholder: 'Couleur principale',
        required: false,
        ordre: 6
      },
      {
        nom: 'Style',
        type: 'select',
        options: ['Moderne', 'Classique', 'Scandinave', 'Industriel', 'Vintage', 'Contemporain', 'Rustique'],
        required: false,
        ordre: 7
      },
      {
        nom: 'Assemblage requis',
        type: 'boolean',
        ordre: 8
      }
    ],

    // üõ†Ô∏è Services - 6 annonces
    'Services': [
      {
        nom: 'Type de service',
        type: 'select',
        options: ['R√©paration', 'Installation', 'Nettoyage', 'Livraison', 'Cours/Formation', 'Consultation', 'Maintenance', 'Autre'],
        required: true,
        ordre: 3
      },
      {
        nom: 'Domaine',
        type: 'select',
        options: ['Informatique', '√âlectrom√©nager', 'Plomberie', '√âlectricit√©', 'Jardinage', 'M√©nage', 'Beaut√©', 'Transport', '√âducation'],
        required: true,
        ordre: 4
      },
      {
        nom: 'Dur√©e estim√©e',
        type: 'string',
        placeholder: 'ex: 2h, 1 jour, 1 semaine',
        description: 'Dur√©e approximative du service',
        required: false,
        ordre: 5
      },
      {
        nom: '√Ä domicile',
        type: 'boolean',
        ordre: 6
      },
      {
        nom: 'Urgence',
        type: 'boolean',
        ordre: 7
      },
      {
        nom: 'Disponibilit√©',
        type: 'select',
        options: ['Imm√©diate', 'Cette semaine', 'Ce mois', '√Ä convenir'],
        required: false,
        ordre: 8
      }
    ],

    // ‚öΩ Sports & Loisirs - 6 annonces
    'Sports & Loisirs': [
      {
        nom: 'Cat√©gorie',
        type: 'select',
        options: ['Sport', 'Fitness', 'Jeux', 'Musique', 'Livres', 'Collection', 'Loisirs cr√©atifs', 'Autre'],
        required: true,
        ordre: 3
      },
      {
        nom: 'Discipline sportive',
        type: 'select',
        options: ['Football', 'Basketball', 'Tennis', 'Running', 'Cyclisme', 'Natation', 'Fitness', 'Yoga', 'Autre'],
        required: false,
        ordre: 4
      },
      {
        nom: 'Niveau',
        type: 'select',
        options: ['D√©butant', 'Interm√©diaire', 'Avanc√©', 'Professionnel'],
        required: false,
        ordre: 5
      },
      {
        nom: '√Çge recommand√©',
        type: 'string',
        placeholder: 'ex: 8-12 ans, Adulte, Tout √¢ge',
        required: false,
        ordre: 6
      },
      {
        nom: 'Garantie',
        type: 'boolean',
        ordre: 7
      },
      {
        nom: 'Date d\'achat',
        type: 'date',
        placeholder: 'Date d\'achat original',
        required: false,
        ordre: 8
      }
    ],

    // üëî V√™tements - 6 annonces
    'V√™tements': [
      {
        nom: 'Type de v√™tement',
        type: 'select',
        options: ['T-shirt', 'Chemise', 'Pantalon', 'Jupe', 'Robe', 'Veste', 'Manteau', 'Pull', 'Short', 'Autre'],
        required: true,
        ordre: 3
      },
      {
        nom: 'Taille',
        type: 'select',
        options: ['XS', 'S', 'M', 'L', 'XL', 'XXL', '34', '36', '38', '40', '42', '44', '46', '48', '50'],
        required: true,
        ordre: 4
      },
      {
        nom: 'Genre',
        type: 'select',
        options: ['Homme', 'Femme', 'Enfant', 'Unisexe'],
        required: true,
        ordre: 5
      },
      {
        nom: 'Couleur',
        type: 'string',
        placeholder: 'Couleur principale',
        required: false,
        ordre: 6
      },
      {
        nom: 'Mati√®re',
        type: 'select',
        options: ['Coton', 'Polyester', 'Laine', 'Soie', 'Cuir', 'Jean', 'Lin', 'Cachemire', 'Synth√©tique'],
        required: false,
        ordre: 7
      },
      {
        nom: 'Saison',
        type: 'select',
        options: ['Printemps/√ât√©', 'Automne/Hiver', 'Toute saison'],
        required: false,
        ordre: 8
      }
    ]
  }
};

// Am√©liorer aussi les attributs existants d'Automobile pour ajouter le type date
const improveExistingCategories = {
  'Automobile': [
    {
      nom: 'Date de premi√®re immatriculation',
      type: 'date',
      placeholder: 'Date de premi√®re immatriculation',
      description: 'Date de premi√®re mise en circulation',
      required: false,
      ordre: 9
    },
    {
      nom: 'Derni√®re r√©vision',
      type: 'date',
      placeholder: 'Date de la derni√®re r√©vision',
      required: false,
      ordre: 10
    }
  ],
  'Immobilier': [
    {
      nom: 'Date de construction',
      type: 'date',
      placeholder: 'Date de construction estim√©e',
      required: false,
      ordre: 8
    },
    {
      nom: 'Disponible √† partir du',
      type: 'date',
      placeholder: 'Date de disponibilit√©',
      required: false,
      ordre: 9
    }
  ],
  '√âlectronique': [
    {
      nom: 'Date d\'achat',
      type: 'date',
      placeholder: 'Date d\'achat original',
      required: false,
      ordre: 6
    },
    {
      nom: 'Fin de garantie',
      type: 'date',
      placeholder: 'Date de fin de garantie',
      required: false,
      ordre: 7
    }
  ]
};

const createAttributesForMyCategories = async () => {
  try {
    await connectDB();

    console.log('üöÄ Cr√©ation d\'attributs pour VOS cat√©gories sp√©cifiques...\n');

    // R√©cup√©rer VOS cat√©gories par nom exact
    const categories = await Categorie.find();
    let categoriesUpdated = 0;
    let totalAttributesCreated = 0;

    // Am√©liorer les cat√©gories existantes avec des attributs de date
    console.log('üîß Am√©lioration des cat√©gories existantes avec attributs de date...');
    for (const [categoryName, additionalAttributes] of Object.entries(improveExistingCategories)) {
      const category = categories.find(cat => cat.nom === categoryName);
      if (category) {
        console.log(`üìÖ Ajout d'attributs de date pour: ${category.icone} ${category.nom}`);
        
        for (const attrData of additionalAttributes) {
          // V√©rifier si l'attribut existe d√©j√†
          const existingAttr = await Attribute.findOne({
            categorie_id: category._id,
            nom: attrData.nom
          });

          if (!existingAttr) {
            try {
              const attribute = new Attribute({
                ...attrData,
                categorie_id: category._id
              });
              await attribute.save();
              totalAttributesCreated++;
              console.log(`   ‚úÖ Ajout√©: ${attrData.nom} (${attrData.type})`);
            } catch (error) {
              console.log(`   ‚ùå Erreur pour "${attrData.nom}":`, error.message);
            }
          } else {
            console.log(`   ‚ÑπÔ∏è  "${attrData.nom}" existe d√©j√†`);
          }
        }
      }
    }

    console.log('\nüìã Cr√©ation d\'attributs pour les cat√©gories sans attributs...');

    // Cr√©er des attributs pour les cat√©gories sans attributs
    for (const category of categories) {
      const existingAttributeCount = await Attribute.countDocuments({ 
        categorie_id: category._id, 
        isActive: true 
      });

      // Traiter les cat√©gories sans attributs OU celles qu'on veut am√©liorer
      const needsAttributes = existingAttributeCount === 0;
      const categoryName = category.nom;

      if (needsAttributes) {
        console.log(`\nüìã Cr√©ation d'attributs pour: ${category.icone} ${categoryName}`);

        const attributesToCreate = [];

        // Ajouter les attributs g√©n√©riques pour toutes les cat√©gories sans attributs
        attributesToCreate.push(...myAttributeTemplates.generic);

        // Ajouter les attributs sp√©cifiques selon le nom exact de la cat√©gorie
        if (myAttributeTemplates.specific[categoryName]) {
          console.log(`   ‚Üí Attributs sp√©cifiques trouv√©s pour "${categoryName}"`);
          attributesToCreate.push(...myAttributeTemplates.specific[categoryName]);
        } else {
          console.log(`   ‚ö†Ô∏è  Aucun template sp√©cifique pour "${categoryName}"`);
        }

        // Cr√©er les attributs
        for (const attrData of attributesToCreate) {
          try {
            const attribute = new Attribute({
              ...attrData,
              categorie_id: category._id
            });
            await attribute.save();
            totalAttributesCreated++;
            console.log(`   ‚úÖ ${attrData.nom} (${attrData.type})`);
          } catch (error) {
            console.log(`   ‚ùå Erreur cr√©ation attribut "${attrData.nom}":`, error.message);
          }
        }

        console.log(`   üéâ ${attributesToCreate.length} attributs cr√©√©s`);
        categoriesUpdated++;
      } else {
        console.log(`   ‚ÑπÔ∏è  ${category.icone} ${categoryName} - ${existingAttributeCount} attributs existants`);
      }
    }

    console.log(`\nüéâ R√âSUM√â:`);
    console.log(`   - ${categoriesUpdated} cat√©gories mises √† jour avec de nouveaux attributs`);
    console.log(`   - ${totalAttributesCreated} attributs cr√©√©s au total`);
    
    if (categoriesUpdated > 0) {
      console.log(`\n‚úÖ Pr√™t pour la migration de vos 30 annonces !`);
      console.log(`\nüìã Prochaines √©tapes:`);
      console.log(`   1. Testez le formulaire de cr√©ation d'annonce`);
      console.log(`   2. Migrez vos annonces existantes avec:`);
      console.log(`      node scripts/smartMigrateAnnonces.js`);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des attributs:', error);
  } finally {
    mongoose.disconnect();
  }
};

// Ex√©cuter la cr√©ation
createAttributesForMyCategories();